Topics we covered:
*********************

1. What is MAVEN
2. MAVEN use as a devops engineer
3. Maven Setup in linux
4. Resources - JAVA,Eclipse 
5. Create a 1st MAVEN project
6. Maven co-ordinates
7. Default dir structure
8. Steps involved in a java project
9. Maven Goals & Repo 
   pom.xml
   Transitive Dependency 
   Maven repositories
   Push Maven project in to Github
   
10. Build a 1st maven project

Prereq: AWS account,GIT bash,putty,Install tomcat,Linux basics

***************************************************************************
MAVEN WITH LINUX

prepare maven server
setup maven on linux
Build maven project on linux
Commonly used maven goals
create a project with Maven Archtype
settings.xml
Deploy an application on TOMCAT server

*************************************************

Maven Coordinates 
   - what is Maven Coordinates? 

Maven coordinates identify uniquely a project, a dependency, or a plugin defined in POM. Each entity is uniquely identified by the combination of a group identifier, an artifact identifier, and the version (and, of course, with the packaging and the classifier).

Config this for our first project

Groupid - com.mavenproj
Artifactid - sampleproj
version - default - without snapshot means is a prod ready

<maven repo for spring boot> and find how they are using 

https://mvnrepository.com/artifact/org.springframework.boot


******************

Building the application:

Compiling the source code
  app.java --> app.class
  apptest.java --> AppTest.class

Responce of Maven:

Run the test cases

Packaging the jar/war/ear files

Dpeloyment - Its not the primary response of MAVEN

before build We need to know about maven goals for this - right click the project name --> runas --> maven build

------------------------------------------------------------------

MAVEN default dir struc - expand out first project and see the how dir created

----------------------------------------------------------------------

Learn about the - maven build life cycle (REF - https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html)

clean- remove all files generated by the previous build
validate - validate the project is correct and all necessary information is available
compile - compile the source code of the project
test- compile - compile the test source code into the destination dir
test -  test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package - take the compiled code and package it in its distributable format, such as a JAR.
verify - run any checks on results of integration tests to ensure quality criteria are met
install - install the package into the local repository, for use as a dependency in other projects locally
deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.

*************************************************************************************************************************************************************************************

What is POM.XML? How its working?

(https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#:~:text=Available%20Variables-,What%20is%20a%20POM%3F,default%20values%20for%20most%20projects.)


dependencies
Copy the dependencies from https://mvnrepository.com/artifact/org.springframework.boot and add it pom.xml

<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <version>2.7.0</version>
    <scope>test</scope>
</dependency>

*********************************************************************************************************************************************************************************

Maven repository? maven central repo -  https://repo1.maven.org/maven2/

Local repo - it will create .m2 under projects

It will pull the req plugins & depen and install locally or company creates a maven enterprose repo and shared to users

Lab:
<Run the maven build with clean and install goals in eclipse>

clean and install 

********************************************************************************
PUSH the code to remote repo

Remote repo - github - Create one repo to github

Go to your git bash and config the basic git 

Go to where your code is stored and right click use git bash

git init
git config --global user.name cloudmugunthan
git config --global user.email cloudmugunthan@gmail.com
git remote add origin <repo url>
git push -u origin main

vi .gitignore - add to stop the unwanted files to move remote repo
target/*

See the code is located in remote repo

**************************************************************************************


************************************
Assignment


MAVEN IN DEVOPS WORKFLOW

Setup jenkins server
Add maven server as an agent to jenkins
Build a jenkins job on slave node 
Build war file on maven build server



















